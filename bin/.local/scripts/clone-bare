#!/usr/bin/env bash
set -e

# Inspired by:
# https://morgan.cugerone.com/blog/
# workarounds-to-git-worktree-using-bare-repository-
# and-cannot-fetch-remote-branches/

# Examples of call:
# git-clone-bare git@github.com:name/repo.git
# => Clones to a /repo directory
#
# git-clone-bare git@github.com:name/repo.git my-repo
# => Clones to a /my-repo directory

REPO=$1
[[ -z $REPO ]] && echo "fatal: You must specify a repository to clone." >&2 && exit 129;

DIR=$2
[[ -z $DIR ]] && DIR=${REPO##*/};

mkdir "$DIR"
cd "$DIR"

# Moves all the administrative git files (a.k.a $GIT_DIR) under .bare directory.
#
# Plan is to create worktrees as siblings of this directory.
# Example targeted structure:
# project_root/
#  |- .bare/...
#  |- main/..
#  |- new-awesome-feature/...
#  |- hotfix-bug-12/...
# ...
git clone --bare $1 .bare
ln -s .bare .git

# Explicitly sets the remote origin fetch so we can fetch remote branches
git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"

# Gets all branches from origin
git fetch origin

HEAD_BRANCH=$(git rev-parse --abbrev-ref HEAD)

git worktree add $HEAD_BRANCH